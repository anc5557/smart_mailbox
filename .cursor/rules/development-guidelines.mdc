---
description: 
globs: 
alwaysApply: false
---
# 개발 가이드라인

## 코딩 스타일
- Python PEP 8 준수
- 타입 힌트 사용 필수
- 함수와 클래스에 docstring 작성
- 한국어 주석 허용 (복잡한 로직 설명시)

## 프로젝트 구조 원칙
```
smart_mailbox/
├── src/
│   ├── gui/           # GUI 관련 모듈 (PyQt6)
│   ├── ai/            # LLM/AI 처리 모듈 (Ollama)
│   ├── email/         # 이메일 파싱/처리 모듈
│   ├── storage/       # JSON 기반 저장소 관리 모듈
│   └── config/        # 설정 관리 모듈
├── tests/             # 테스트 파일
├── assets/            # 리소스 파일
├── data/              # 앱 데이터 디렉토리 (JSON 파일)
└── dist/              # 배포용 파일
```

## 독립 실행형 앱 설계 원칙
- **내장 저장소**: JSON 파일 기반 데이터베이스 사용 ([json_storage.py](mdc:src/smart_mailbox/storage/json_storage.py))
- **설정 파일**: JSON 형태로 앱 내부에 저장 ([config/](mdc:src/smart_mailbox/config/))
- **데이터 디렉토리**: 사용자 홈 디렉토리 하위에 SmartMailbox 폴더 생성
- **이식성**: 단일 실행파일로 모든 의존성 포함
- **오프라인 동작**: Ollama 로컬 서버를 통해 인터넷 연결 없이 동작

## 데이터 저장 전략
### JSON 기반 로컬 데이터베이스
- 이메일 메타데이터 및 태그 정보 ([Email 데이터클래스](mdc:src/smart_mailbox/storage/json_storage.py))
- 사용자 설정 및 커스텀 태그 ([Tag 데이터클래스](mdc:src/smart_mailbox/storage/json_storage.py))
- 앱 사용 히스토리 및 처리 로그

### 파일 시스템 구조
```
~/SmartMailbox/           # 사용자 데이터 디렉토리
├── emails.json          # 이메일 데이터
├── tags.json            # 태그 설정
├── settings.json        # 앱 설정
├── logs.json            # 처리 로그
├── config.json          # AI 설정 (ai.py)
├── emails/              # 처리된 이메일 파일들
└── logs/                # 앱 로그 파일
```

## GUI 아키텍처 패턴
### 메인 윈도우 ([main_window.py](mdc:src/smart_mailbox/gui/main_window.py))
- 중앙 집중식 컴포넌트 관리
- 백그라운드 워커를 통한 비동기 처리 (EmailProcessingWorker)
- 시그널/슬롯을 통한 컴포넌트 간 통신

### 컴포넌트 분리
- **Sidebar**: 태그 목록 및 네비게이션 ([sidebar.py](mdc:src/smart_mailbox/gui/sidebar.py))
- **EmailView**: 이메일 목록 및 상세 보기 ([email_view.py](mdc:src/smart_mailbox/gui/email_view.py))
- **Settings**: 설정 다이얼로그 ([settings.py](mdc:src/smart_mailbox/gui/settings.py))

### 테마 시스템
- qdarktheme을 통한 다크/라이트 테마 지원
- 메인 애플리케이션에서 중앙 관리 ([main.py](mdc:src/smart_mailbox/main.py))

## AI 모듈 아키텍처
### Ollama 클라이언트 ([ollama_client.py](mdc:src/smart_mailbox/ai/ollama_client.py))
- 공식 ollama 라이브러리 사용
- thinking 모드 제어 기능
- 연결 상태 확인 및 모델 목록 관리
- 오류 처리 및 재시도 로직

### 태깅 시스템 ([tagger.py](mdc:src/smart_mailbox/ai/tagger.py))
- 단일 프롬프트로 모든 태그 동시 분류
- JSON 응답 파싱 및 검증
- 태그 프롬프트 동적 로드

### 답장 생성 ([reply_gen.py](mdc:src/smart_mailbox/ai/reply_gen.py))
- 컨텍스트 기반 답장 생성
- 톤앤매너 조정 기능
- 원본 이메일 참조 포함

## 의존성 관리
- uv를 사용한 의존성 관리
- 개발/프로덕션/빌드 의존성 분리
- 정확한 버전 고정으로 재현 가능한 빌드 보장
- JSON 처리는 Python 표준 라이브러리 사용

## 로깅 시스템 ([logger.py](mdc:src/smart_mailbox/config/logger.py))
- 구조화된 로깅 (일반 로그 + 사용자 행위 로그)
- 파일 및 콘솔 출력 지원
- 로그 레벨 관리

## 테스트 원칙
- 단위 테스트 작성 필수
- AI 기능은 모킹하여 테스트
- GUI 테스트는 선택적 구현
- JSON 파일 테스트는 임시 디렉토리 사용

## 보안 고려사항
- 이메일 내용은 로컬에서만 처리
- Ollama 연결 정보 안전하게 저장
- 사용자 데이터는 평문 JSON으로 투명하게 저장
- 민감한 정보는 로그에서 제외

## 성능 최적화
### 백그라운드 처리
- QThread를 통한 멀티스레딩
- 진행 상황 실시간 업데이트
- 취소 가능한 작업

### 메모리 관리
- 대용량 이메일 처리 시 스트리밍
- 불필요한 데이터 정리
- 효율적인 JSON 파일 관리

## 빌드 및 배포
- PyInstaller를 사용한 단일 실행파일 생성
- 필요한 모든 의존성 번들링
- 플랫폼별 최적화 (Windows/macOS)
- 디지털 서명 적용 (배포시)
