---
description: 
globs: 
alwaysApply: false
---
# 개발 가이드라인

## 코딩 스타일
- Python PEP 8 준수
- 타입 힌트 사용 필수
- 함수와 클래스에 docstring 작성
- 한국어 주석 허용 (복잡한 로직 설명시)

## 프로젝트 구조 원칙
```
smart_mailbox/
├── src/
│   ├── gui/           # GUI 관련 모듈
│   ├── ai/            # LLM/AI 처리 모듈
│   ├── email/         # 이메일 파싱/처리 모듈
│   ├── storage/       # 내장 저장소 관리 모듈
│   └── config/        # 설정 관리 모듈
├── tests/             # 테스트 파일
├── assets/            # 리소스 파일
├── data/              # 앱 데이터 디렉토리 (SQLite, 설정파일)
└── dist/              # 배포용 파일
```

## 독립 실행형 앱 설계 원칙
- **내장 저장소**: SQLite 파일 기반 데이터베이스 사용
- **설정 파일**: JSON/YAML 형태로 앱 내부에 저장
- **데이터 디렉토리**: 사용자 홈 디렉토리 하위에 앱 전용 폴더 생성
- **이식성**: 단일 실행파일로 모든 의존성 포함
- **오프라인 동작**: 인터넷 연결 없이도 기본 기능 동작

## 데이터 저장 전략
### 로컬 데이터베이스 (SQLite)
- 이메일 메타데이터 및 태그 정보
- 사용자 설정 및 커스텀 태그
- 앱 사용 히스토리

### 파일 시스템 구조
```
~/SmartMailbox/           # 사용자 데이터 디렉토리
├── database.db          # SQLite 데이터베이스
├── config.json          # 앱 설정
├── custom_tags.json     # 커스텀 태그 설정
├── emails/              # 처리된 이메일 파일들
└── logs/                # 앱 로그 파일
```

## 의존성 관리
- uv를 사용한 의존성 관리
- 개발/프로덕션/빌드 의존성 분리
- 정확한 버전 고정으로 재현 가능한 빌드 보장
- SQLite는 Python 표준 라이브러리 사용

## 테스트 원칙
- 단위 테스트 작성 필수
- AI 기능은 모킹하여 테스트
- GUI 테스트는 선택적 구현
- 파일 시스템 테스트는 임시 디렉토리 사용

## 보안 고려사항
- 이메일 내용은 로컬에서만 처리
- Ollama 연결 정보 안전하게 저장
- 사용자 데이터 암호화 저장
- SQLite 데이터베이스 암호화 옵션 고려

## 빌드 및 배포
- PyInstaller를 사용한 단일 실행파일 생성
- 필요한 모든 의존성 번들링
- 플랫폼별 최적화 (Windows/macOS)
- 디지털 서명 적용 (배포시)
