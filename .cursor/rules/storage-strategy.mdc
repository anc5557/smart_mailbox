---
description: 
globs: 
alwaysApply: false
---
# 데이터 저장 전략

## JSON 기반 저장소 시스템

### 개요
AI Smart Mailbox는 SQLite 대신 JSON 파일 기반 저장소를 사용하여 데이터를 관리합니다. 이는 투명성, 이식성, 그리고 단순성을 위한 설계 결정입니다.

### 핵심 파일 구조
```
~/SmartMailbox/
├── emails.json          # 이메일 데이터
├── tags.json            # 태그 설정 및 정의
├── settings.json        # 애플리케이션 설정
├── logs.json            # 처리 로그
├── emails/              # 실제 .eml 파일들
└── logs/                # 애플리케이션 로그 파일
```

## 데이터 모델

### Email 데이터 클래스 ([json_storage.py](mdc:src/smart_mailbox/storage/json_storage.py))
```python
@dataclass
class Email:
    id: str                          # 고유 ID (UUID)
    subject: str                     # 제목
    sender: str                      # 발신자 이메일
    sender_name: Optional[str]       # 발신자 이름
    recipient: str                   # 수신자 이메일
    recipient_name: Optional[str]    # 수신자 이름
    date_sent: str                   # 발송 일시 (ISO format)
    date_received: str               # 수신 일시 (ISO format)
    body_text: Optional[str]         # 텍스트 본문
    body_html: Optional[str]         # HTML 본문
    file_path: str                   # 원본 파일 경로
    file_size: int                   # 파일 크기
    file_hash: Optional[str]         # 파일 해시 (SHA256)
    ai_processed: bool               # AI 처리 완료 여부
    has_attachments: bool            # 첨부파일 존재 여부
    attachment_count: int            # 첨부파일 개수
    attachment_info: Optional[str]   # 첨부파일 정보 (JSON 문자열)
    tags: List[str]                  # 할당된 태그 목록
```

### Tag 데이터 클래스
```python
@dataclass
class Tag:
    id: str                          # 고유 ID
    name: str                        # 태그 이름
    display_name: str                # 표시명 (이모지 포함)
    description: str                 # 설명
    color: str                       # 색상 코드
    is_system: bool                  # 시스템 태그 여부
    is_active: bool                  # 활성화 여부
    ai_prompt: Optional[str]         # AI 분류용 프롬프트
    created_at: str                  # 생성 일시
    updated_at: str                  # 수정 일시
```

## 저장소 관리자 ([JSONStorageManager](mdc:src/smart_mailbox/storage/json_storage.py))

### 주요 기능
1. **데이터 CRUD 작업**
   - 이메일 저장/조회/삭제
   - 태그 관리
   - 설정 관리

2. **검색 및 필터링**
   - 텍스트 검색
   - 태그별 필터링
   - 날짜 범위 필터링

3. **데이터 무결성**
   - JSON 파싱 오류 처리
   - 백업 파일 생성
   - 데이터 유효성 검증

### 기본 태그 시스템
시스템은 다음 기본 태그들을 자동으로 생성합니다:

```python
default_tags = [
    {
        "id": "중요",
        "name": "중요",
        "display_name": "🔴 중요",
        "description": "긴급하거나 중요한 내용의 이메일",
        "color": "#FF4444",
        "ai_prompt": "이메일이 긴급하거나 중요한 사안을 다루고 있나요?"
    },
    {
        "id": "회신필요",
        "name": "회신필요", 
        "display_name": "💬 회신필요",
        "description": "답장이 필요한 이메일",
        "color": "#00AA44",
        "ai_prompt": "이메일에 답장이나 응답이 필요한가요?"
    }
    # ... 더 많은 기본 태그들
]
```

## AI 태깅 통합

### 태그 프롬프트 시스템 ([tagger.py](mdc:src/smart_mailbox/ai/tagger.py))
- 각 태그는 고유한 AI 프롬프트를 가집니다
- AI는 단일 요청으로 모든 태그를 동시에 평가합니다
- 결과는 JSON 배열로 반환되어 파싱됩니다

### 데이터 플로우
1. 이메일 파싱 → Email 객체 생성
2. AI 태깅 → tags 리스트 업데이트  
3. JSON 파일에 저장
4. GUI에서 실시간 표시

## 성능 최적화

### 메모리 효율성
- 대용량 이메일 본문은 필요시에만 로드
- JSON 파일은 지연 로딩 방식 사용
- 검색 인덱스는 메모리에 캐시

### 파일 I/O 최적화
- 배치 작업을 통한 JSON 쓰기 최적화
- 파일 잠금을 통한 동시 접근 방지
- 백업 파일을 통한 데이터 보호

## 확장성 고려사항

### 향후 SQLite 마이그레이션
현재 JSON 구조는 향후 SQLite로 마이그레이션할 때를 고려하여 설계되었습니다:
- 정규화된 데이터 구조
- 명확한 관계 정의
- 인덱싱 가능한 필드 구조

### 백업 및 복원
- JSON 파일은 사람이 읽을 수 있는 형태
- 간단한 파일 복사로 백업 가능
- 버전 관리 시스템과 호환

## 보안 및 프라이버시

### 데이터 투명성
- 모든 데이터가 평문 JSON으로 저장
- 사용자가 직접 데이터를 확인 및 수정 가능
- 숨겨진 데이터나 암호화 없음

### 로컬 저장
- 모든 데이터는 사용자 로컬 머신에만 저장
- 네트워크 전송 없음 (Ollama 제외)
- 사용자 완전 제어
